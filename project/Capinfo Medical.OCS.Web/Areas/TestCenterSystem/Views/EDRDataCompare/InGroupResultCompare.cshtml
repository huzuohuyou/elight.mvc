@{
    Layout = null;   @*"~/Views/Shared/_First_Page.cshtml";*@
}

<div class="layui-tab layui-tab-card" style="margin-top: 5px;margin-bottom: 5px;">

    <ul class="layui-tab-title">
        <li id="TAB_CPATS" class="layui-this">SD_CPATS</li>
        <li id="TAB_CPATDETAIL_I">SD_CPAT_DETAIL(住院)</li>
        <li id="TAB_CPATDETAIL_O">SD_CPAT_DETAIL(门诊)</li>
        <li id="TAB_CPATDETAIL_E">SD_CPAT_DETAIL(急诊)</li>
    </ul>
    <div class="layui-tab-content">
        <div class="layui-tab-item  layui-show" style="height:300px" id="cpats">
            @*@Html.Partial("~/Areas/TestCenterSystem/Views/EDRDataCompare/InGroupComparePart.cshtml")*@
        </div>
        <div class="layui-tab-item" style="height:300px" id="cpatDetailOfI">

        </div>
        <div class="layui-tab-item" style="height:300px" id="cpatDetailOfO">

        </div>
        <div class="layui-tab-item" style="height:300px" id="cpatDetailOfE">

        </div>
    </div>
</div>

<script src="~/Content/jquery/jquery.min.js"></script>
<script type="text/javascript">
    var enforce = "konklone.io";
    if ((enforce == window.location.host) && (window.location.protocol != "https:"))
        window.location.protocol = "https";
</script>

<script type="text/javascript">
    $(function () {
        $('#TAB_CPATS').bind('click', function () {
            clearController();
            $('div#cpats').load("InGroupComparePart", function () { GetCpats(0); });
        });
        $('#TAB_CPATDETAIL_I').bind('click', function () {
            clearController();
            $('div#cpatDetailOfI').load("InGroupComparePart", function () { GetCpats(1); });
        });
        $('#TAB_CPATDETAIL_O').bind('click', function () {
            clearController();
            $('div#cpatDetailOfO').load("InGroupComparePart", function () { GetCpats(2); });
        });
        $('#TAB_CPATDETAIL_E').bind('click', function () {
            clearController();
            $('div#cpatDetailOfE').load("InGroupComparePart", function () { GetCpats(3); });
        });
    });



</script>

<script>

    var excerptRows = 50;
    var input;
    var url;
    var lastSaved;

    function doJSON() {
        // just in case
        $(".drop").hide();

        // get input JSON, try to parse it
        var newInput = $(".json textarea").val();
        //if (newInput == input) return;   zlt

        input = newInput;
        if (!input) {
            // wipe the rendered version too
            $(".json code").text("");
            return;
        }

        var json = jsonFrom(input);

        if (json) {
            // Reset any error message from previous failed parses.
            $("div.error").hide();
            $("div.warning").show();

            var pretty = JSON.stringify(json, undefined, 2);
            $(".json code").text(pretty);
            if (pretty.length < (50 * 1024))
                hljs.highlightBlock($(".json code").get(0));

            // convert to CSV, make available
            doCSV(json);
        } else {
            // Show error.
            $("div.warning").hide();
            $("div.error").show();
            $(".json code").text("");
        }

        // Either way, update the error-reporting link to include the latest.
        setErrorReporting(null, input);

        return true;
    }

    function renderAll(e) {
        var json = jsonFrom(input);
        var inArray = arrayFrom(json);
        var outArray = [];
        for (var row in inArray)
            outArray[outArray.length] = parse_object(inArray[row]);
        renderCSV(outArray);
        $(".show-render-all").hide();
        return false;
    }

    // show rendered JSON
    function showJSON(rendered) {
        console.log("ordered to show JSON: " + rendered);
        if (rendered) {
            if ($(".json code").text()) {
                console.log("there's code to show, showing...");
                $(".json .rendered").show();
                $(".json .editing").hide();
            }
        } else {
            $(".json .rendered").hide();
            $(".json .editing").show().focus();
        }
    }

    function showCSV(rendered) {
        if (rendered) {
            if ($(".csv table").text || $(".csv table").text() === "") {
                $(".csv .rendered").show();
                $(".csv .editing").hide();
            }
        } else {
            $(".csv .rendered").hide();
            $(".csv .editing").show().focus();
        }
    }

    // takes an array of flat JSON objects, converts them to arrays
    // renders them into a small table as an example
    function renderCSV(objects) {
        var rows = $.csv.fromObjects(objects, { justArrays: true });
        if (rows.length < 1) return;

        // find CSV table
        var table = $(".csv table")[0];
        $(table).text();

        // render header row
        var thead = document.createElement("thead");
        var tr = document.createElement("tr");
        var header = rows[0];
        for (field in header) {
            var th = document.createElement("th");
            if (field == "remove" || field == "contains") continue;
            switch (header[field]) {
                case "cdr1PNO":
                    $(th).text($("#CDRName1 option:selected").text() + "（CPATNO）");
                case "samePNO":
                    $(th).text("相同数据（CPATNO）");
                    break;
                case "cdr2PNO":
                    $(th).text($("#CDRName2 option:selected").text() + "（CPATNO）");
                    break;
                    //default:
                    //    $(th).text(header[field]);
                    //    break;
            }
            tr.appendChild(th);
        }
        thead.appendChild(tr);

        // render body of table
        var tbody = document.createElement("tbody");
        for (var i = 1; i < rows.length; i++) {
            tr = document.createElement("tr");
            for (field in rows[i]) {
                var td = document.createElement("td");
                if (field == "remove" || field == "contains") continue;
                $(td)
                    .text(rows[i][field])
                    //.text(encode64(utf16to8(rows[i][field])))
                    .attr("title", rows[i][field]);
                tr.appendChild(td);
            }
            tbody.appendChild(tr);
        }

        table.appendChild(thead);
        table.appendChild(tbody);
    }

    function doCSV(json) {
        var inArray = arrayFrom(json);

        var outArray = [];
        for (var row in inArray)
            outArray[outArray.length] = parse_object(inArray[row]);

        $("span.rows.count").text("" + outArray.length);

        var csv = $.csv.fromObjects(outArray);
        // excerpt and render first few rows
        renderCSV(outArray.slice(0, excerptRows));
        showCSV(true);

        // if there's more we're not showing, add a link to show all
        if (outArray.length > excerptRows)
            $(".show-render-all").show();

        // show raw data if people really want it
        $(".csv textarea").val(csv);
        csv = csv.replace("cdr1PNO", $("#CDRName1 option:selected").text() + "（CPATNO）");
        csv = csv.replace("savePNO", "相同数据（CPATNO）");
        csv = csv.replace("cdr2PNO", $("#CDRName2 option:selected").text() + "（CPATNO）");
        var uri = "data:text/csv;charset=utf-8,\uFEFF" + encodeURI(csv);
        $(".csv a.download").attr("href", uri);
    }

    // loads original pasted JSON from textarea, saves to anonymous gist
    // rate-limiting means this could easily fail with a 403.
    function saveJSON() {
        if (!input) return false;
        if (input == lastSaved) return false;

        // save a permalink to an anonymous gist
        var gist = {
            description: "test",
            public: false,
            files: {
                "source.json": {
                    "content": input
                }
            }
        };

        // TODO: show spinner/msg while this happens

        console.log("Saving to an anonymous gist...");
        $.post(
          'https://api.github.com/gists',
          JSON.stringify(gist)
        ).done(function (data, status, xhr) {

            // take new Gist id, make permalink
            setPermalink(data.id);

            // send analytics event
            Events.permalink();

            // mark what we last saved
            lastSaved = input;

            // update error-reporting link, including permalink
            setErrorReporting(data.id, input);

            console.log("Remaining this hour: " + xhr.getResponseHeader("X-RateLimit-Remaining"));

        }).fail(function (xhr, status, errorThrown) {
            console.log(xhr);

            // send analytics event
            Events.permalink_error(status);
        });

        return false;
    }

    function setErrorReporting(id, content) {
        var base = "https://github.com/konklone/json/issues/new";

        var title = "Error parsing some specific JSON";

        var body = "I'm having an issue converting this JSON:\n\n";
        if (id) body += (
          window.location.protocol + "//" +
          window.location.host + window.location.pathname +
          "?id=" + id + "\n\n"
        );

        if (content.length <= (7 * 1024))
            body += ("```json\n" + content + "\n```");

        var finalUrl = base + "?title=" + encodeURIComponent(title) +
          "&body=" + encodeURIComponent(body);

        $(".error a.report").attr("href", finalUrl);

        // console.log("Updated error reporting link to:" + finalUrl);
        return true;
    }

    // given a valid gist ID, set the permalink to use it
    function setPermalink(id) {
        if (history && history.pushState)
            history.pushState({ id: id }, null, "?id=" + id);
    }

    // check query string for gist ID
    function loadPermalink() {
        var id = getParam("id");
        if (!id) return;

        $.get('https://api.github.com/gists/' + id,
          function (data, status, xhr) {
              console.log("Remaining this hour: " + xhr.getResponseHeader("X-RateLimit-Remaining"));

              var input = data.files["source.json"].content;
              $(".json textarea").val(input);
              doJSON();
              showJSON(true);
          }
        ).fail(function (xhr, status, errorThrown) {
            console.log("Error fetching anonymous gist!");
            console.log(xhr);
            console.log(status);
            console.log(errorThrown);
        });
    }

    $(function () {

        $(".json textarea").blur(function () { showJSON(true); });
        $(".json pre").click(function () { showJSON(false) });
        $(".csv textarea").blur(function () { showCSV(true); })
        $(".csv .raw").click(function () {
            showCSV(false);
            $(".csv textarea").focus().select();
            return false;
        })

        $(".render-all").click(renderAll);

        // if there's no CSV to download, don't download anything.
        // also, log an analytics event.
        $(".csv a.download").click(function () {
            var data = $(".csv textarea").val();
            if (data) {
                Events.download(data.length);
                return true;
            } else
                return false;
        });

        // Both elements are present on page-load, so use normal click handler.
        $(".save a, .error a.save").click(saveJSON);

        // transform the JSON whenever it's pasted/edited
        $(".json textarea")
          .on('paste', function () {
              // delay the showing so the paste is pasted by then
              setTimeout(function () {
                  doJSON();
                  $(".json textarea").blur();
              }, 1);
          })
          .keyup(doJSON); // harmless to repeat doJSON

        // go away
        $("body").click(function () {
            $(".drop").hide();
        });

        $(document)
          .on("dragenter", function (e) {
              e.preventDefault();
              e.stopPropagation();
              $(".drop").show();
          })
          .on("dragover", function (e) {
              e.preventDefault();
              e.stopPropagation();
          })
          .on("dragend", function (e) {
              e.preventDefault();
              e.stopPropagation();
              $(".drop").hide();
          })
          .on("drop", function (e) {
              $(".drop").hide();

              if (e.originalEvent.dataTransfer) {
                  if (e.originalEvent.dataTransfer.files.length) {
                      e.preventDefault();
                      e.stopPropagation();

                      var reader = new FileReader();

                      reader.onload = function (ev) {
                          console.log(ev.target.result);
                          $(".json textarea").val(ev.target.result);

                          setTimeout(function () {
                              doJSON();
                              $(".json textarea").blur();
                          }, 1);
                      }

                      reader.readAsText(e.originalEvent.dataTransfer.files[0]);
                  }
              }
          });

        // highlight CSV on click
        $(".csv textarea").click(function () { $(this).focus().select(); });

        loadPermalink();
    });
    /** 格式化输入字符串**/

    //用法: "hello{0}".format('world')；返回'hello world'

    String.prototype.format = function () {

        var args = arguments;

        return this.replace(/\{(\d+)\}/g, function (s, i) {

            return args[i];

        });

    }

    //flag：0:cpats；1:cpatdetail(住院)；2:cpatdetail(门诊)；3:cpatdetail(急诊)
    function GetCpats(flag) {
        //console.log(route)@*"@ViewBag.route"*@

        $.ajax({
            type: "GET",
            url: "/TestCenterSystem/EDRDataCompare/GetCpatsOrDetailsCompareValues",//route,
            data: {
                "cdrID1": $('#CDRName1').val(),
                "cdrName1": $("#CDRName1 option:selected").text(),
                "cdrID2": $('#CDRName2').val(),
                "cdrName2": $("#CDRName2 option:selected").text(),
                "startTime": $('#startTime').val(),
                "endTime": $('#endTime').val(),
                "flag": flag
            },
            success: function (obj) {
                var result = JSON.parse(obj);
                if (result.Item1) {
                    $("#ingroup_value_json").val(JSON.stringify(result.Item2.Item1));  //$("#ingroup_value_json").val(obj)
                    $("#lbCDRName1").text($("#CDRName1 option:selected").text());
                    $("#lbCDRName1Count").text(result.Item2.Item2);
                    $("#lbCDRName2").text($("#CDRName2 option:selected").text());
                    $("#lbCDRName2Count").text(result.Item2.Item4);
                    $("#lbSameDataCount").text(result.Item2.Item3);
                    doJSON();
                }
                else
                    alert(result.Item2);
                //$.layerMsg(result.Item2, "warning");
                layerCount++;
                layerClose(layerCount);
            }
        });
    }
    //GetCpats("/TestCenterSystem/EDRDataCompare/GetCpatsCompareValues", $("#ingroup_value_json"));
</script>

<script>
    (function (i, s, o, g, r, a, m) {
        i['GoogleAnalyticsObject'] = r; i[r] = i[r] || function () {
            (i[r].q = i[r].q || []).push(arguments)
        }, i[r].l = 1 * new Date(); a = s.createElement(o),
        m = s.getElementsByTagName(o)[0]; a.async = 1; a.src = g; m.parentNode.insertBefore(a, m)
    })(window, document, 'script', 'https://www.google-analytics.com/analytics.js', 'ga');

    ga('create', 'UA-252618-16', 'konklone.io');
    ga('set', 'forceSSL', true);
    ga('set', 'anonymizeIp', true);
    ga('send', 'pageview');
</script>

